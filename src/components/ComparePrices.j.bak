import { useState } from 'react';

import { CoinPrice } from './CoinPrice';
import { HistoricCoinPrice } from './HistoricCoinPrice';
import { DatePicker } from './DatePicker';

import { LayoutCard } from './LayoutCard';

import './ComparePrices.scss';

const ComparePrices = () => {
  const curDate = 'Today';
  const [coin, setCoin] = useState('bitcoin');
  const [dateOptions, setDateOptions] = useState('2022-08-11');
  const [curCoinPrice, setCurCoinPrice] = useState(null);
  const [histCoinPrice, setHistCoinPrice] = useState(null);
  const [percentage, setPercentage] = useState(null);

  const calculateValueChange = (curVal, prevVal) => {
    const result = ((curVal - prevVal) / prevVal) * 100;
    console.log(result);
    return ((curVal - prevVal) / prevVal) * 100;
  };

  calculateValueChange(100, 100);

  const handleChangeDate = (dateStr) => {
    setDateOptions({ date: dateStr });
  };

  const handleCurPriceChange = (curPrice) => {
    setCurCoinPrice(curPrice);
  };

  const handleHistPriceChange = (curPrice) => {
    setHistCoinPrice(curPrice);
  };

  const handleClick = (coin) => {
    setCoin(coin);
  };

  return (
    <div className="compare-prices flow">
      <h1 className="compare-prices__heading">
        Compare Prices:{' '}
        {/*
        <span className="compare-prices__heading--coin">{coin}</span>
        */}
      </h1>
      <div
        style={{
          display: 'grid',
          gridTemplateColumns: 'repeat(2, 1fr)',
          gap: 'var(--gap)',
        }}
      >
        <button onClick={() => handleClick('bitcoin')}>BITCOIN</button>
        <button onClick={() => handleClick('ethereum')}>ETHEREUM</button>
        <button onClick={() => setDateOptions({ offsetDay: -7 })}>
          1 Week ago
        </button>
        <button onClick={() => setDateOptions({ offesetMonth: -1 })}>
          1 Month ago
        </button>
      </div>

      <DatePicker onChangeDate={handleChangeDate} />
      <div className="compare-prices__cards">
        <LayoutCard cardTitle={curDate} sub={coin}>
          <CoinPrice coin={coin} onPriceChange={handleCurPriceChange} />
        </LayoutCard>

        <LayoutCard cardTitle={dateOptions.date} sub={coin}>
          <HistoricCoinPrice
            coin={coin}
            dateOptions={{ dateOptions }}
            onPriceChange={handleHistPriceChange}
          />
        </LayoutCard>

        <LayoutCard cardTitle="Change">
          <div>{calculateValueChange(curCoinPrice, histCoinPrice)} %</div>
        </LayoutCard>

        <div>{dateOptions.date}</div>
        {/*
        <div>{curCoinPrice}</div>
        <div>{histCoinPrice}</div>
        */}
      </div>
    </div>
  );
};

export { ComparePrices };
